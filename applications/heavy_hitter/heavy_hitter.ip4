#include "includes/headers.p4"
#include "includes/parser.p4"

// TODO: Define the threshold value
#define HEAVY_HITTER_THRESHOLD 100
#define BUCKETS 50

field_list ipv4_checksum_list {
        ipv4.version;
        ipv4.ihl;
        ipv4.diffserv;
        ipv4.totalLen;
        ipv4.identification;
        ipv4.flags;
        ipv4.fragOffset;
        ipv4.ttl;
        ipv4.protocol;
        ipv4.srcAddr;
        ipv4.dstAddr;
}

field_list_calculation ipv4_checksum {
    input {
        ipv4_checksum_list;
    }
    algorithm : csum16;
    output_width : 16;
}

calculated_field ipv4.hdrChecksum  {
    verify ipv4_checksum;
    update ipv4_checksum;
}

action _drop() {
    drop();
}

header_type custom_metadata_t {@data ca be forwarded
    fields {
        nhop_ipv4: 32;
        // TODO: Add the metadata for hash indices and count values
	@pcube_for (i) (1,BUCKETS,1)	
        hash_val$i: 16;
        count_val$i: 16;
    @pcube_endfor
    }
}

metadata custom_metadata_t custom_metadata;

action set_nhop(nhop_ipv4, port) {
    modify_field(custom_metadata.nhop_ipv4, nhop_ipv4);
    modify_field(standard_metadata.egress_spec, port);
    add_to_field(ipv4.ttl, -1);
}

action set_dmac(dmac) {
    modify_field(ethernet.dstAddr, dmac);
}

// TODO: Define the field list to compute the hash on
// Use the 5 tuple of 
// (src ip, dst ip, src port, dst port, ip protocol)

field_list hash_fields {
    ipv4.srcAddr;
    ipv4.dstAddr;
    ipv4.protocol;
    tcp.srcPort;
    tcp.dstPort;
}

// TODO: Define two different hash functions to store the counts
// Please use csum16 and crc16 for the hash functions

// Need indexed algorithm names hash computations

field_list_calculation heavy_hitter_hash1 {
    input { 
        hash_fields;
    }
    algorithm : csum16;
    output_width : 16;
}

field_list_calculation heavy_hitter_hash2 {
    input { 
        hash_fields;
    }
    algorithm : crc16;
    output_width : 16;
}

// TODO: Define the registers to store the counts @for

@pcube_for (i) (1,BUCKETS,1)
register heavy_hitter_counter$i{
    width : 16;
    instance_count : 16;
}
@pcube_endfor

// TODO: Actions to set heavy hitter filter: @for
action set_heavy_hitter_count() {
@pcube_for (i) (1,BUCKETS,1)
    modify_field_with_hash_based_offset(custom_metadata.hash_val$i, 0, heavy_hitter_hash$i, 16); //dest, base, field_list_calc for hash calc, size of hash
    register_read(custom_metadata.count_val$i, heavy_hitter_counter$i, custom_metadata.hash_val$i); //dest, reg-ref name of reg array, offset of array to get reg 
    add_to_field(custom_metadata.count_val$i, 1);
    register_write(heavy_hitter_counter$i, custom_metadata.hash_val$i, custom_metadata.count_val$i);
//reg-ref name of reg array, offset of array to get reg 
@pcube_endfor
}

// TODO: Define the tables to run actions
table set_heavy_hitter_count_table {
    actions {
        set_heavy_hitter_count;
    }
    size: 1;
}

// TODO: Define table to drop the heavy hitter traffic
table drop_heavy_hitter_table {
    actions { _drop; }
    size: 1;
}

table ipv4_lpm {
    reads {
        ipv4.dstAddr : lpm;
    }
    actions {
        set_nhop;
        _drop;
    }
    size: 1024;
}

table forward {
    reads {
        custom_metadata.nhop_ipv4 : exact;
    }
    actions {
        set_dmac;
        _drop;
    }
    size: 512;
}

action rewrite_mac(smac) {
    modify_field(ethernet.srcAddr, smac);
}

table send_frame {
    reads {
        standard_metadata.egress_port: exact;
    }
    actions {
        rewrite_mac;
        _drop;
    }
    size: 256;
}

control ingress {
    // TODO: Add table control here: @bool/@cmp
    apply(set_heavy_hitter_count_table);
    if ( @pcube_cmp (1,BUCKETS,1)(>)(and)(custom_metadata.count_val$i, HEAVY_HITTER_THRESHOLD)){
    apply(drop_heavy_hitter_table);
    } else {
        apply(ipv4_lpm);
        apply(forward);
    }
}

control egress {
    apply(send_frame);
}
